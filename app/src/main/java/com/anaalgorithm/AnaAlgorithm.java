package com.anaalgorithm;

import com.myutils.GlobalDate;

//import com.utils.LogUtils;
//
//import java.util.Arrays;
public class AnaAlgorithm {

	public AnaAlgorithm() {
		// TODO Auto-generated constructor stub
	}
	
	static
	{
		System.loadLibrary("anaalgorithm");
	}
	//数据处理函数
	/**
	* 数字滤波
	* double []x 原始数据
	* dReturn 滤波后数据
	* nNum 数据个数
	* eType 滤波类型 (缺省值 =FILTERTYPE_CubicSmooth_5)
	* nWnd  滤波窗口（缺省值 =3）
	* \return 
	*/
	public native void DigitalFilter(double []x, double []dReturn, int nNum,eFilterType eType,int nWnd);

	/**
	* 扩增\熔曲信号曲线形态是否满足初步计算条件
	* dx 荧光信号值序号 （1-nNum）
	* dy （扩增\熔曲 荧光信号值）
	* nNum 荧光信号值数据点个数
	* ParamInfo  传入内部判别所需要的（阈值）参数信息
	* \return 
	*/
	public native boolean AbleToCalculate(double []dx, double []dy, int nNum,FunAbleToCalcuParamInfo ParamInfo,int newStart/*=1*/,int newForwardNum /*= 3*/,float newStdNum /*= 3*/,int minX /*= 5*/);
	
	/**
	* 快速排序
	* nNum 数据个数
	* pInput 原始数据
	* pOutput 排序后数据，从低到高
	* \return 
	*/
	public native void SortDouble(int nNum, double []pInput, double []pOutput);

	/**
	* 一阶负导数
	* nCurveNum 曲线数量（缺省值 =1）
	* nPtNum 总的数据点数
	* dX 熔曲温度数据
	* dY 熔曲荧光信号值
	* dXReturn 输出的温度数据
	* dYReturn 一阶负导数数值
	* \return 
	*/
	public native void FirstNegDerivative(int nCurveNum, int nPtNum, double []dX, double []dY, double []dXReturn, double []dYReturn);
	
	/**
	* 光滑曲线（两次数字滤波，五点三次滤波方式）
	* nCurveNum 曲线数量（缺省值 =1）
	* nPtNum 总的数据点数
	* dX X轴数据（熔曲分析用，对应熔曲温度数据）
	* dY Y轴数据（熔曲分析用，对应熔曲荧光信号值）
	* dYReturn 滤波处理后数值
	* \return 
	*/
	public native void DataDigitalFilter(int nCurveNum, int nPtNum, double []dX, double []dY, double []dYReturn);
	
	/**
	* 插值计算某一点值
	* x X轴数据
	* y Y轴数据
	* nNum 数据点数
	* xCur 待插值计算的x数值
	* yCur 插值计算出的y信号值
	* \return 
	*/
	public native void Spline(double []x, double []y, int nNum, double xCur,MyDouble yCur);

	public native void CalDerivative(double []dX, double []dY, int nNum,int nDev,double []dReturn);

	/**
	* 最大二阶导数自动计算Ct值
	* nCurveNum (缺省值 = 1)
	* nPtNum （总的数据点数，单条曲线数据点 = nPtNum/nCurveNum）
	* dX
	* dY
	* dCt（double dCt[1]，返回计算得出的Ct值）
	* dLinePara( double dPara[2]，需传入参数，尚未用到)
	* bStdCurve(缺省值 =false)
	* nFiltNum (缺省值 =4)
	* \return 
	*/
	public native void GenStdCurveBySndDerivative(int nCurveNum,int nPtNum, double []dX, double []dY,double []dCt,double []dLinePara,boolean bStdCurve,int nFiltNum);
	
	/**
	* 根据确定的荧光阈值计算ct值
	* nCurveNum (缺省值 = 1)
	* nPtNum （总的数据点数，单条曲线数据点 = nPtNum/nCurveNum）
	* dX
	* dY
	* dYTemp 阈值
	* dCt（double dCt[1]，返回计算得出的Ct值）
	* dLinePara( double dPara[2]，需传入参数，尚未用到)
	* bStdCurve(缺省值 =false)
	* \return 
	*/
	public native void GenStdCurveBySelFluThres(int nCurveNum,int nPtNum, double []dX, double []dY,double dYTemp,double []dCt,double []dLinePara,boolean bStdCurve);
	
	/**
	* 根据基线段标准差的倍率阈值计算ct值
	* nCurveNum (缺省值 = 1)
	* nPtNum （总的数据点数，单条曲线数据点 = nPtNum/nCurveNum）
	* nStar 基线起点下标（数组序号从0开始）
	* nEnd  基线终点下标（数组序号从0开始）//基线段的取值范围[nStar,nEnd)--for(int i=nStar;i<nEnd;i++)
	* nMultiple 标准差倍率（缺省值=10）
	* dX
	* dY
	* dCt（double dCt[1]，返回计算得出的Ct值）
	* dLinePara( double dPara[2]，需传入参数，尚未用到)
	* bStdCurve(缺省值 =false)
	* bBaseLine(扣除基线背景 缺省值=false) true,信号值减去基线背景值；false，信号值不做处理
	* \return 
	*/
	public native void GenStdCurveByStd(int nCurveNum,int nPtNum, int nStar, int nEnd, int nMultiple,double []dX, double []dY,double []dCt,double []dLinePara,boolean bStdCurve,boolean bBaseLine);
	
	/**
	* 自动搜索波峰最大值位置，按峰值信号的高低依次输出各自的峰值位置信息
	* nCrestNum (待搜索的波峰的数量，缺省值 = 1)
	* nPtNum （总的数据点数）
	* dXValue
	* dYValue
	* dReturn (double dReturn[nCrestNum],返回实际搜索到的峰位置信息；若峰不存在，dReturn[i] = -1)
	* dThrePercent 阈值参数,峰高小于最大峰值的20%视为无效峰（缺省值=0.2）
	* \return 
	*/
	public native void AutoFindCrest(int nCrestNum,int nPtNum, double []dXValue, double []dYValue, double []dReturn,double dThrePercent);

	public native void NormalizedAnalysisBySndDerivativeOpenBaseLineParam(int nNum,double pdx[],double pdyInput[],double pdyOutput[],FunAmpNormalizedAnaParamInfo paraminfo,BaseLineParam baseLineParam,int curIndex /*= 1*/,double pYDisplayInput[] /*= NULL*/,double pYDisplayOutput[] /*= NULL*/);

	public native void KdsptForwardMBackN_New(int n, double pY[], double pReturn[], int forwardM, int backwardN);

	public native void KdsptForwardMBackN(int n, double pY[], double pReturn[], int forwardM, int backwardN);

	public native void DeltaRnAnalysisBySndDerivativeOpenBaseLineParam(int nNum, double[]pdx,double[]pdyInput, double[]pdyOutput,FunAmpNormalizedAnaParamInfo paraminfo,BaseLineParam baseLineParam,double pYDisplayInput[] /*= NULL*/,double pYDisplayOutput[] /*= NULL*/);

	/**
	 * 扩增\熔曲信号曲线形态是否满足初步计算条件
	 * dx 荧光信号值序号 （1-nNum）
	 * dy （扩增\熔曲 荧光信号值）
	 * nNum 荧光信号值数据点个数
	 * ParamInfo  传入内部判别所需要的（阈值）参数信息
	 * \return
	 */
	public boolean AbleToCalculate(double []dx, double []dy, int nNum,FunAbleToCalcuParamInfo ParamInfo,int minX)
	{
		return AbleToCalculate(dx,dy,nNum,ParamInfo,1,3, (float) 3.0,minX);
	};

	public boolean AbleToCalculate(double []dx, double []dy, int nNum,int minX)
	{
		FunAbleToCalcuParamInfo funAbleToCalcuParamInfo = new FunAbleToCalcuParamInfo();
		return AbleToCalculate(dx,dy,nNum,funAbleToCalcuParamInfo,1,3, (float) 3.0,minX);
	}

//	public void NormalizedAnalysisBySndDerivativeOpenBaseLineParam(int nNum,double pdx[],double pdyInput[],double pdyOutput[],FunAmpNormalizedAnaParamInfo paraminfo,BaseLineParam baseLineParam,int curIndex /*= 1*/,double pYDisplayInput[] /*= NULL*/,,double pYDisplayOutput[] /*= NULL*/)
//	{
//
//		return NormalizedAnalysisBySndDerivativeOpenBaseLineParam(nNum,pdx,pdyInput,new FunAmpNormalizedAnaParamInfo(),new BaseLineParam(,,!GlobalDate.g_pcrCtSuanFaRef.),0,pYDisplayInput,pYDisplayOutput);
//	}


//	public void main() {//String[] args
//		// TODO Auto-generated method stub
//		AnaAlgorithm test = new AnaAlgorithm();
//		eFilterType type = eFilterType.FILTERTYPE_CFMEAN7;
//
//		double[] x = {1, 2, 7, 4, 5, 9, 6, 7, 10, 9};
//		double[] y = new double[10];
//		int nDataNum = 377;
//		test.DigitalFilter(x, y, 10, type, 3);
//		test.DigitalFilter(x, y, 10, type, 3);
//		double[] pdx = new double[nDataNum];
//		double[] dXReturn = new double[nDataNum];
//		double[] dYReturn = new double[nDataNum];
//		for (int i = 0; i < 211; i++) {
//			pdx[i] = i + 1;
//		}
//		double[] pdxInput = {24.52, 24.72, 24.95, 25.14, 25.29, 25.49, 25.7, 25.9, 26.06, 26.24, 26.45, 26.67, 26.85, 27.0, 27.19, 27.4, 27.62, 27.83, 28.0, 28.14, 28.34, 28.55, 28.75, 28.97, 29.15, 29.29, 29.48, 29.67, 29.88, 30.08, 30.29, 30.49, 30.7, 30.88, 31.01, 31.19, 31.39, 31.58, 31.77, 31.98, 32.18, 32.38, 32.58, 32.77, 32.97, 33.17, 33.37, 33.55, 33.75, 33.95, 34.14, 34.33, 34.53, 34.72, 34.91, 35.11, 35.29, 35.49, 35.68, 35.87, 36.06, 36.25, 36.44, 36.65, 36.84, 37.04, 37.25, 37.46, 37.66, 37.87, 38.06, 38.27, 38.47, 38.68, 38.88, 39.07, 39.28, 39.47, 39.67, 39.88, 40.07, 40.27, 40.47, 40.68, 40.88, 41.08, 41.28, 41.48, 41.68, 41.88, 42.08, 42.29, 42.49, 42.67, 42.85, 43.05, 43.25, 43.45, 43.65, 43.85, 44.05, 44.25, 44.46, 44.66, 44.86, 45.07, 45.27, 45.47, 45.68, 45.87, 46.06, 46.24, 46.45, 46.64, 46.85, 47.05, 47.26, 47.45, 47.66, 47.87, 48.07, 48.27, 48.46, 48.64, 48.84, 49.04, 49.25, 49.45, 49.66, 49.86, 50.06, 50.27, 50.45, 50.64, 50.84, 51.04, 51.24, 51.45, 51.65, 51.86, 52.06, 52.25, 52.42, 52.64, 52.84, 53.05, 53.25, 53.46, 53.67, 53.84, 54.03, 54.23, 54.44, 54.65, 54.86, 55.06, 55.25, 55.43, 55.64, 55.84, 56.05, 56.26, 56.46, 56.64, 56.83, 57.04, 57.24, 57.46, 57.65, 57.85, 58.04, 58.25, 58.46, 58.66, 58.85, 59.04, 59.23, 59.44, 59.66, 59.87, 60.05, 60.24, 60.44, 60.65, 60.87, 61.05, 61.24, 61.45, 61.66, 61.88, 62.06, 62.23, 62.45, 62.66, 62.87, 63.05, 63.25, 63.46, 63.68, 63.86, 64.04, 64.25, 64.47, 64.66, 64.85, 65.05, 65.26, 65.48, 65.65, 65.85, 66.06, 66.27, 66.47, 66.66, 66.87, 67.08, 67.26, 67.46, 67.66, 67.88, 68.07, 68.26, 68.47, 68.67, 68.86, 69.07, 69.29, 69.47, 69.65, 69.87, 70.08, 70.26, 70.47, 70.68, 70.87, 71.07, 71.27, 71.48, 71.67, 71.87, 72.09, 72.27, 72.47, 72.68, 72.88, 73.07, 73.28, 73.48, 73.67, 73.88, 74.08, 74.27, 74.47, 74.69, 74.88, 75.07, 75.3, 75.48, 75.68, 75.89, 76.09, 76.28, 76.49, 76.7, 76.87, 77.08, 77.29, 77.49, 77.69, 77.89, 78.1, 78.29, 78.48, 78.7, 78.9, 79.08, 79.29, 79.5, 79.7, 79.88, 80.1, 80.3, 80.5, 80.69, 80.89, 81.1, 81.29, 81.48, 81.7, 81.91, 82.1, 82.29, 82.5, 82.71, 82.9, 83.09, 83.29, 83.51, 83.7, 83.89, 84.08, 84.3, 84.51, 84.7, 84.89, 85.08, 85.31, 85.51, 85.7, 85.89, 86.09, 86.32, 86.51, 86.7, 86.89, 87.07, 87.31, 87.51, 87.7, 87.88, 88.09, 88.3, 88.52, 88.71, 88.9, 89.09, 89.29, 89.51, 89.71, 89.91, 90.09, 90.29, 90.49, 90.72, 90.91, 91.11, 91.3, 91.49, 91.69, 91.91, 92.12, 92.31, 92.5, 92.7, 92.89, 93.09, 93.31, 93.51, 93.71, 93.9, 94.1, 94.28, 94.49, 94.7, 94.92, 95.11, 95.3, 95.5, 95.7, 95.88, 96.09, 96.28, 96.52, 96.73, 96.91, 97.1, 97.3, 97.49, 97.69, 97.87, 98.09, 98.26, 98.48, 98.69, 98.89, 99.06, 99.1};
//		double[] pdyInput = {1368.0, 1394.0, 1377.0, 1377.0, 1363.0, 1350.0, 1348.0, 1328.0, 1357.0, 1350.0, 1349.0, 1305.0, 1331.0, 1313.0, 1312.0, 1320.0, 1315.0, 1305.0, 1302.0, 1287.0, 1305.0, 1326.0, 1299.0, 1282.0, 1294.0, 1299.0, 1295.0, 1286.0, 1242.0, 1294.0, 1261.0, 1278.0, 1267.0, 1256.0, 1297.0, 1262.0, 1248.0, 1267.0, 1262.0, 1247.0, 1281.0, 1255.0, 1237.0, 1278.0, 1264.0, 1247.0, 1253.0, 1284.0, 1261.0, 1241.0, 1242.0, 1254.0, 1261.0, 1251.0, 1275.0, 1257.0, 1258.0, 1255.0, 1269.0, 1224.0, 1263.0, 1242.0, 1248.0, 1242.0, 1245.0, 1251.0, 1275.0, 1238.0, 1246.0, 1254.0, 1211.0, 1272.0, 1263.0, 1251.0, 1230.0, 1257.0, 1281.0, 1247.0, 1253.0, 1245.0, 1273.0, 1284.0, 1262.0, 1250.0, 1245.0, 1283.0, 1290.0, 1298.0, 1273.0, 1317.0, 1299.0, 1296.0, 1326.0, 1320.0, 1338.0, 1338.0, 1386.0, 1369.0, 1363.0, 1399.0, 1394.0, 1424.0, 1450.0, 1468.0, 1510.0, 1517.0, 1531.0, 1564.0, 1613.0, 1642.0, 1654.0, 1703.0, 1754.0, 1815.0, 1848.0, 1922.0, 1958.0, 2091.0, 2131.0, 2212.0, 2352.0, 2448.0, 2586.0, 2672.0, 2809.0, 2947.0, 3111.0, 3251.0, 3386.0, 3545.0, 3740.0, 3909.0, 4065.0, 4163.0, 4259.0, 4343.0, 4396.0, 4481.0, 4504.0, 4520.0, 4484.0, 4575.0, 4518.0, 4529.0, 4518.0, 4559.0, 4495.0, 4466.0, 4569.0, 4541.0, 4586.0, 4471.0, 4511.0, 4435.0, 4479.0, 4424.0, 4427.0, 4419.0, 4423.0, 4410.0, 4458.0, 4423.0, 4354.0, 4378.0, 4338.0, 4360.0, 4324.0, 4318.0, 4338.0, 4274.0, 4300.0, 4321.0, 4323.0, 4233.0, 4280.0, 4286.0, 4215.0, 4195.0, 4184.0, 4143.0, 4227.0, 4151.0, 4203.0, 4164.0, 4169.0, 4202.0, 4097.0, 4098.0, 4130.0, 4071.0, 4111.0, 4051.0, 4062.0, 4063.0, 4111.0, 4042.0, 4077.0, 4078.0, 3977.0, 4031.0, 3955.0, 3994.0, 3975.0, 3952.0, 3995.0, 3910.0, 3885.0, 3960.0, 3886.0, 3913.0, 3890.0, 3912.0, 3876.0, 3915.0, 3838.0, 3853.0, 3830.0, 3870.0, 3831.0, 3842.0, 3849.0, 3779.0, 3774.0, 3801.0, 3798.0, 3707.0, 3725.0, 3714.0, 3721.0, 3663.0, 3665.0, 3719.0, 3730.0, 3744.0, 3737.0, 3713.0, 3693.0, 3691.0, 3720.0, 3657.0, 3690.0, 3699.0, 3700.0, 3680.0, 3664.0, 3619.0, 3617.0, 3607.0, 3602.0, 3650.0, 3568.0, 3552.0, 3535.0, 3526.0, 3546.0, 3541.0, 3516.0, 3568.0, 3506.0, 3544.0, 3552.0, 3501.0, 3554.0, 3500.0, 3474.0, 3468.0, 3469.0, 3439.0, 3484.0, 3428.0, 3481.0, 3411.0, 3490.0, 3346.0, 3408.0, 3337.0, 3396.0, 3370.0, 3360.0, 3342.0, 3330.0, 3325.0, 3366.0, 3356.0, 3344.0, 3325.0, 3347.0, 3359.0, 3273.0, 3336.0, 3303.0, 3277.0, 3272.0, 3249.0, 3264.0, 3256.0, 3251.0, 3266.0, 3225.0, 3194.0, 3216.0, 3208.0, 3166.0, 3213.0, 3194.0, 3175.0, 3161.0, 3130.0, 3140.0, 3118.0, 3136.0, 3124.0, 3088.0, 3071.0, 3159.0, 3117.0, 3089.0, 3100.0, 3090.0, 3077.0, 3079.0, 3058.0, 3037.0, 3047.0, 3075.0, 3078.0, 3031.0, 3049.0, 3040.0, 3065.0, 2983.0, 3009.0, 2990.0, 2988.0, 3008.0, 2975.0, 2962.0, 2953.0, 2953.0, 2958.0, 2929.0, 2956.0, 2948.0, 2953.0, 2893.0, 2888.0, 2871.0, 2848.0, 2861.0, 2817.0, 2855.0, 2808.0, 2849.0, 2847.0, 2858.0, 2842.0, 2781.0, 2767.0, 2771.0, 2824.0, 2780.0, 2750.0, 2799.0, 2750.0, 2697.0, 2747.0, 2763.0, 2763.0, 2701.0, 2664.0, 2668.0, 2679.0, 2676.0, 2664.0, 2664.0, 2679.0, 2637.0};
//
//		for (int i = 0; i < nDataNum; i++) {
//			pdx[i] = i + 1;
//			//pdyInput[i] *= -1;
//		}
//		for (int i = 0; i < 15; i++) {
//			test.DigitalFilter(pdyInput, dYReturn, nDataNum, type, 3);
//			for (int k = 0; k < nDataNum; k++) {
//				pdyInput[k] = dYReturn[k];
//			}
//			test.DigitalFilter(pdyInput, dYReturn, nDataNum, eFilterType.FILTERTYPE_CubicSmooth_5, 3);
//			for (int k = 0; k < nDataNum; k++) {
//				pdyInput[k] = dYReturn[k];
//			}
//			test.DigitalFilter(pdxInput, dYReturn, nDataNum, type, 3);
//			for (int k = 0; k < nDataNum; k++) {
//				pdxInput[k] = dYReturn[k];
//			}
//			test.DigitalFilter(pdxInput, dYReturn, nDataNum, eFilterType.FILTERTYPE_CubicSmooth_5, 3);
//			for (int k = 0; k < nDataNum; k++) {
//				pdxInput[k] = dYReturn[k];
//			}
//		}
//		//for(int k = 0; k < nDataNum; k++)
//		//{
//		//	pdyInput[k] *= -1;
//		//}
//		test.AbleToCalculate(pdx, pdyInput, nDataNum, false, true);
//
//		MyInteger nMin = new MyInteger(0);
//		MyInteger nMax = new MyInteger(0);
//		test.FindMinPosAndMaxPosByNormalizeFrom0To1ByFirstDerivative(nDataNum, pdxInput, pdyInput, nMin, nMax, 4, 0.2);
//		double d1 = pdxInput[nMin.value];
//		double d2 = pdxInput[nMax.value];
//		test.NormalizedAnalysisFrom0To1BySndDerivative(nDataNum, nMax.value, nMin.value, d1, d2, pdxInput, pdyInput, dYReturn);
//
//		test.FirstNegDerivative(1, nDataNum, pdxInput, dYReturn, dXReturn, dYReturn);
//		double[] dCrestValue = new double[1];
//		test.AutoFindCrest(1, nDataNum, dXReturn, dYReturn, dCrestValue, 0.2);
//		//test.DigitalFilter(x, y, 10,type ,3);
//
//		//double[] originDatasAmp = {544.3817, 541.93744, 548.8564, 548.65454, 550.0145, 545.82733, 542.3382, 537.33093, 534.4891, 538.49634, 544.6764, 546.0, 547.6546, 553.84906, 551.5109, 546.46, 562.49634, 589.47455, 632.15814, 695.0782, 819.2509, 1014.40186, 1277.4818, 1553.5764, 1766.6709, 1881.2871, 1975.6638, 1989.6399, 1992.6908, 1989.6399, 2002.9637, 2031.5619, 2031.8273, 2028.6545, 2032.1066};
//		//int len = 35;
//		//double[] originDatasAmp = {0.976,1.253,1.711,2.214,2.844,3.565,4.343,5.121,5.843,6.464,6.958,7.328,7.587,7.757,7.862,7.924,7.956,7.970,7.974,7.973,7.970,7.968,7.967,7.967,7.968};
//		/*D2*///double[] originDatasAmp	= {1562.0, 1833.0, 2284.0, 3002.0, 4217.0, 5953.0, 8190.0, 10479.0, 11951.0, 13177.0, 13884.0, 14423.0, 14564.0, 14883.0, 15000.0, 15010.0, 15067.0, 14981.0, 14944.0, 15047.0, 14954.0, 14867.0, 14772.0, 14960.0, 15016.0, 19173.0, 19092.0, 19200.0, 19241.0, 19347.0, 19320.0, 19683.0, 19641.0, 19631.0, 19938.0, 19817.0, 20001.0, 20000.0, 20176.0, 20175.0, 20215.0, 20191.0, 20285.0, 20242.0, 20302.0, 20140.0, 20474.0, 20378.0, 20429.0, 20373.0, 20436.0, 20452.0, 20464.0, 20538.0, 20451.0, 20400.0, 20386.0, 20375.0, 20233.0, 20420.0, 20371.0, 20297.0, 20538.0, 20382.0, 20375.0, 20288.0, 20534.0, 20555.0, 20415.0, 20375.0, 20255.0, 20324.0, 20443.0, 20381.0, 20378.0, 20349.0, 20492.0, 20059.0, 20400.0, 20600.0, 20566.0, 20592.0, 20650.0, 20752.0, 20468.0, 20809.0, 20766.0, 20966.0, 20990.0, 20948.0, 20990.0, 21166.0, 21031.0, 21149.0, 20941.0, 21374.0, 21528.0, 21151.0, 21508.0, 21651.0, 21718.0, 21685.0, 21768.0};
//		/*D3*///double[] originDatasAmp	= {3467.0, 5107.0, 7283.0, 9635.0, 11915.0, 13587.0, 15014.0, 15896.0, 16233.0, 16743.0, 16901.0, 16890.0, 16639.0, 16911.0, 16868.0, 16838.0, 16810.0, 16768.0, 16676.0, 16794.0, 16599.0, 16639.0, 16348.0, 16512.0, 16510.0, 20845.0, 20809.0, 20920.0, 21036.0, 21103.0, 21074.0, 21369.0, 21473.0, 21412.0, 21637.0, 21712.0, 21888.0, 21905.0, 22009.0, 21906.0, 22260.0, 22053.0, 22178.0, 22130.0, 22199.0, 21898.0, 22217.0, 22345.0, 22366.0, 22338.0, 22377.0, 22384.0, 22350.0, 22485.0, 22443.0, 22471.0, 22171.0, 22249.0, 22119.0, 22340.0, 22429.0, 22188.0, 22436.0, 22448.0, 22448.0, 22345.0, 22486.0, 22491.0, 22432.0, 22477.0, 22404.0, 22466.0, 22489.0, 22399.0, 22528.0, 22611.0, 22525.0, 22198.0, 22444.0, 22522.0, 22594.0, 22742.0, 22880.0, 22914.0, 22740.0, 23067.0, 23030.0, 23074.0, 23182.0, 23181.0, 23241.0, 23344.0, 23347.0, 23479.0, 23234.0, 23602.0, 23656.0, 23426.0, 23558.0, 23744.0, 23534.0, 23455.0, 23336.0};
//		//double[] originDatasAmp	= {3295.0, 4228.0, 5618.0, 7530.0, 9836.0, 11346.0, 12775.0, 13826.0, 14329.0, 14773.0, 14925.0, 15247.0, 14865.0, 15193.0, 15256.0, 15103.0, 15246.0, 15054.0, 15101.0, 15055.0, 15106.0, 15099.0, 14958.0, 14981.0, 14908.0, 19529.0, 19325.0, 19382.0, 19569.0, 19674.0, 19702.0, 19968.0, 20058.0, 20070.0, 20304.0, 20304.0, 20364.0, 20506.0, 20405.0, 20694.0, 20691.0, 20882.0, 20981.0, 20732.0, 20643.0, 21009.0, 20988.0, 21079.0, 21062.0, 21053.0, 21129.0, 21183.0, 21154.0, 21369.0, 21199.0, 20975.0, 21149.0, 21328.0, 21159.0, 21511.0, 21368.0, 21005.0, 21320.0, 21314.0, 21428.0, 21368.0, 21340.0, 21482.0, 21579.0, 21419.0, 21709.0, 21586.0, 21704.0, 21454.0, 21578.0, 21644.0, 21876.0, 21804.0, 21863.0, 21725.0, 22011.0, 21970.0, 22080.0, 22238.0, 21956.0, 22327.0, 22015.0, 22466.0, 22252.0, 22472.0, 22520.0, 22479.0, 22789.0, 22560.0, 22479.0, 22906.0, 22825.0, 22926.0, 22965.0, 22899.0, 22915.0, 22746.0, 22798.0};
//		//double[] originDatasAmp	= {1075.0, 1074.0, 1120.0, 1170.0, 1259.0, 1475.0, 1860.0, 2630.0, 3918.0, 5683.0, 7969.0, 9729.0, 11148.0, 12015.0, 12813.0, 13122.0, 13382.0, 13716.0, 13745.0, 13459.0, 13722.0, 13805.0, 13846.0, 13773.0, 13726.0, 18006.0, 17994.0, 17859.0, 18097.0, 18124.0, 18124.0, 18289.0, 18359.0, 18496.0, 18553.0, 18629.0, 18385.0, 18848.0, 18788.0, 18753.0, 18900.0, 18997.0, 19043.0, 19024.0, 18955.0, 18977.0, 19125.0, 19051.0, 19241.0, 19157.0, 19215.0, 19257.0, 19238.0, 19266.0, 19230.0, 19165.0, 19273.0, 19316.0, 19281.0, 19218.0, 19385.0, 19225.0, 19388.0, 19018.0, 19268.0, 19406.0, 19351.0, 18916.0, 19350.0, 19151.0, 19400.0, 19329.0, 19410.0, 19421.0, 18847.0, 19393.0, 19009.0, 19411.0, 19346.0, 19472.0, 19370.0, 19572.0, 19626.0, 19730.0, 19662.0, 19816.0, 19737.0, 19669.0, 19621.0, 19875.0, 19914.0, 20063.0, 19824.0, 19933.0, 20084.0, 19908.0, 19917.0, 20057.0, 20109.0, 20146.0, 20086.0, 19868.0, 19663.0};
//		//double[] originDatasAmp	= {410.0, 402.0, 398.0, 402.0, 404.0, 389.0, 388.0, 388.0, 381.0, 393.0, 383.0, 375.0, 373.0, 382.0, 385.0, 376.0, 391.0, 386.0, 364.0, 378.0, 373.0, 378.0, 378.0, 354.0, 383.0, 376.0, 368.0, 372.0, 370.0, 388.0, 393.0, 396.0, 424.0, 445.0, 487.0, 524.0, 597.0, 618.0, 642.0, 650.0};
//		//double[] originDatasAmp = {536.0, 526.0, 538.0, 534.0, 536.0, 530.0, 517.0, 527.0, 526.0, 517.0, 514.0, 523.0, 521.0, 517.0, 531.0, 523.0, 524.0, 527.0, 541.0, 519.0, 527.0, 519.0, 516.0, 524.0, 527.0, 533.0, 528.0, 544.0, 532.0, 536.0, 536.0, 550.0, 555.0, 567.0, 585.0, 608.0, 611.0, 618.0, 651.0, 664.0};
//
//		//double[] originDatasAmp = {21169.0, 21306.0, 21384.0, 21329.0, 21310.0, 21256.0, 21203.0, 21161.0, 21234.0, 21093.0, 21093.0, 21010.0, 21013.0, 20965.0, 20852.0, 20869.0, 20859.0, 20825.0, 20706.0, 20710.0, 20645.0, 20667.0, 20653.0, 20649.0, 20607.0, 20600.0, 20508.0, 20574.0, 20475.0, 20446.0, 20455.0, 20424.0, 20412.0, 20445.0, 20532.0, 20671.0, 20902.0, 21257.0, 21808.0, 22284.0};
//
//		//A6 20632.0, 20839.0, 20947.0, 20897.0, 20978.0, 20921.0, 20952.0, 20935.0, 20892.0, 20877.0, 20884.0, 20852.0, 20863.0, 20834.0, 20765.0, 20871.0, 20789.0, 20690.0, 20801.0, 20729.0, 20660.0, 20785.0, 20711.0, 20784.0, 20723.0, 20732.0, 20686.0, 20772.0, 20907.0, 21076.0, 21357.0, 21783.0, 22481.0, 23049.0, 23635.0, 24124.0, 24645.0, 24980.0, 25397.0, 25655.0
//		//B6,21544.0, 21849.0, 22099.0, 22083.0, 22139.0, 22135.0, 22105.0, 22113.0, 22063.0, 22112.0, 22116.0, 22092.0, 22011.0, 22042.0, 22042.0, 22033.0, 22055.0, 21993.0, 21989.0, 22008.0, 21897.0, 21996.0, 22038.0, 22097.0, 21993.0, 21973.0, 22028.0, 21990.0, 21969.0, 21935.0, 21983.0, 21937.0, 22113.0, 22101.0, 22409.0, 22651.0, 23162.0, 23689.0, 24185.0, 24645.0
//		//C6,21169.0, 21306.0, 21384.0, 21329.0, 21310.0, 21256.0, 21203.0, 21161.0, 21234.0, 21093.0, 21093.0, 21010.0, 21013.0, 20965.0, 20852.0, 20869.0, 20859.0, 20825.0, 20706.0, 20710.0, 20645.0, 20667.0, 20653.0, 20649.0, 20607.0, 20600.0, 20508.0, 20574.0, 20475.0, 20446.0, 20455.0, 20424.0, 20412.0, 20445.0, 20532.0, 20671.0, 20902.0, 21257.0, 21808.0, 22284.0
//
//
//		//double[] originDatasAmp = {20632.0, 20839.0, 20947.0, 20897.0, 20978.0, 20921.0, 20952.0, 20935.0, 20892.0, 20877.0, 20884.0, 20852.0, 20863.0, 20834.0, 20765.0, 20871.0, 20789.0, 20690.0, 20801.0, 20729.0, 20660.0, 20785.0, 20711.0, 20784.0, 20723.0, 20732.0, 20686.0, 20772.0, 20907.0, 21076.0, 21357.0, 21783.0, 22481.0, 23049.0, 23635.0, 24124.0, 24645.0, 24980.0, 25397.0, 25655.0};
//		//double[] originDatasAmp = {21544.0, 21849.0, 22099.0, 22083.0, 22139.0, 22135.0, 22105.0, 22113.0, 22063.0, 22112.0, 22116.0, 22092.0, 22011.0, 22042.0, 22042.0, 22033.0, 22055.0, 21993.0, 21989.0, 22008.0, 21897.0, 21996.0, 22038.0, 22097.0, 21993.0, 21973.0, 22028.0, 21990.0, 21969.0, 21935.0, 21983.0, 21937.0, 22113.0, 22101.0, 22409.0, 22651.0, 23162.0, 23689.0, 24185.0, 24645.0};
//		double[] originDatasAmp = {21169.0, 21306.0, 21384.0, 21329.0, 21310.0, 21256.0, 21203.0, 21161.0, 21234.0, 21093.0, 21093.0, 21010.0, 21013.0, 20965.0, 20852.0, 20869.0, 20859.0, 20825.0, 20706.0, 20710.0, 20645.0, 20667.0, 20653.0, 20649.0, 20607.0, 20600.0, 20508.0, 20574.0, 20475.0, 20446.0, 20455.0, 20424.0, 20412.0, 20445.0, 20532.0, 20671.0, 20902.0, 21257.0, 21808.0, 22284.0};
//		int len = /*25*/40;
//		double[] result = new double[len];
//		double[] xt = {59.70000076293945, 59.940748203984015, 60.17718330756294, 60.412372577582474, 60.643975526936856, 60.872451938883465, 61.097632318115245, 61.32022952880859, 61.54081602172852, 61.76009582519531, 61.9784636291504, 62.19633546142578, 62.4136793334961, 62.63068725585938, 62.84755122680665, 63.06478325195313, 63.282975335693365, 63.5032474975586, 63.726463739013674, 63.953360034179696, 64.18419235229491, 64.41868865356446, 64.65553687133789, 64.89313696289062, 65.1296009338379, 65.3632648010254, 65.5928485961914, 65.81814438476562, 66.03944020996093, 66.25771209716797, 66.47396804199221, 66.68931204833986, 66.9042240966797, 67.1190721923828, 67.33361630859375, 67.54764846191406, 67.76067261962889, 67.97246475830079, 68.18256082763672, 68.39088082275391, 68.59731270751954, 68.80224050292969, 69.0062882324219, 69.21065594482423, 69.41663967285156, 69.62579145507814, 69.83924731445313, 70.05766326904298, 70.2810553100586, 70.50879941406251, 70.7395195678711, 70.97166372070312, 71.20356782226563, 71.43356785888672, 71.66041583251953, 71.88339172363281, 72.10203157958986, 72.3162714477539, 72.52644732666015, 72.73289522705076, 72.93606319580076, 73.13651120605468, 73.33489522705078, 73.53182327880859, 73.72822333984375, 73.92502335205079, 74.12329532470703, 74.32382327880859, 74.52742319335938, 74.7343510986328, 74.94463903808594, 75.15782302246095, 75.37371104736329, 75.59171114501954, 75.81156729736327, 76.03281549072264, 76.25521568603516, 76.47780786132812, 76.69977595214843, 76.91963194580077, 77.136223828125, 77.34812764892578, 77.55468743896483, 77.75539128417968, 77.95089521484375, 78.14193526611328, 78.33017540283201, 78.51734361572264, 78.70574383544923, 78.8971200439453, 79.09328020019531, 79.29499233398437, 79.50249643554687, 79.71462452392578, 79.92977658691407, 80.14563264160157, 80.36038463134766, 80.57240053710939, 80.78132836914064, 80.98742414550782, 81.19191987304688, 81.39585562744142, 81.60038347167969, 81.80598341064453, 82.01289545898437, 82.22055961914062, 82.42849583740232, 82.6359680541992, 82.84220825195311, 83.04601639404297, 83.24628846435547, 83.4414564819336, 83.62995246582031, 83.81040041503908, 83.98214433593749, 84.14508822021483, 84.30016005859375, 84.44884786376953, 84.59299166259765, 84.73428750000001, 84.87404743652344, 85.0129755004883, 85.15135968017577, 85.28924794921876, 85.42657625732423, 85.56377652587892, 85.70140871582032, 85.84038482666017, 85.98150487060546, 86.12582486572266, 86.27352084960938, 86.42475283203126, 86.5789447998047, 86.73548874511718, 86.89297666015625, 87.05076855468751, 87.2078404663086, 87.36393643798829, 87.51883247070313, 87.67329658203126, 87.82737674560546, 87.98177690429688, 88.13657700195313, 88.29201704101563, 88.44752099609374, 88.60337687988282, 88.75923271484375, 88.91531252441405, 89.07156829833983, 89.22867204589842, 89.3864797729492, 89.54548749999998, 89.70561525878904, 89.86703908691406, 90.02910302734375, 90.19172708740234, 90.35420726318358, 90.51647952880859, 90.67822385253905, 90.84008017578125, 91.0022884765625, 91.16556871337892, 91.32995285644532, 91.49593688964845, 91.66315281982422, 91.83160064697265, 92.00096042480467, 92.17137619628906, 92.34225599365234, 92.51356784667968, 92.68486378173827, 92.85585576171874, 93.02606376953125, 93.19559979248046, 93.36428780517578, 93.53225577392577, 93.69965305989584, 93.8666716796875, 94.03338454318576, 94.19971345893012, 94.36581016936125, 94.5311010425709, 94.6963627176167, 94.86000061035156};
//		double[] yt = {-13.011854047121993, 2.677323770420043, 23.763290424746828, 45.13017447950132, 66.28417673586698, 80.7462621009475, 90.92740305851918, 92.54739873190331, 83.21766924252931, 68.65370164389381, 55.39674125119036, 42.10165133680629, 32.59014560250737, 33.01666701082874, 40.07965134601632, 47.238222801651276, 54.69773599422297, 61.111026189318764, 59.755979150957714, 51.86579331475848, 43.65434604616363, 36.18046816436701, 29.14027962619603, 28.362884887178332, 32.93569477058059, 35.91181889138402, 37.7368523459963, 40.32646192264315, 38.84064576577809, 35.090627653073824, 35.15639605135236, 37.2798183554632, 38.50758800463528, 41.4953174590795, 45.52154580835605, 49.04902031161825, 53.15109504964276, 61.06499723828474, 71.97447729581742, 81.4667477942442, 86.87079000076501, 86.79298866722183, 78.59929145673387, 65.50078104929906, 55.39190575854783, 50.58458367518862, 54.024884227381314, 67.12881745892756, 82.56396242565435, 94.2753102301912, 102.27110068066038, 102.67925233760384, 95.12873852047132, 86.28630816428361, 79.55400754009307, 76.4117197563329, 80.80620708636631, 92.9830082405479, 112.0464791507097, 137.05937056519792, 163.48334680874137, 189.97058469471153, 216.73809953693453, 241.05721979153213, 262.4638312192103, 286.0746648317201, 309.5848889894239, 331.55140934210925, 355.5986236496262, 383.93202236980585, 416.6955323344422, 464.4996714022492, 538.5662985580923, 648.3524648347786, 806.7640379023908, 1030.961518484348, 1326.7396090684365, 1697.9723079825555, 2139.9999904132706, 2630.0438894834856, 3121.9841225966056, 3565.293262058504, 3900.764298858722, 4069.30482941977, 4041.0685651408107, 3818.73175041957, 3431.115985850487, 2929.754882767781, 2391.966471856528, 1882.5305435819469, 1454.5349832968336, 1139.958663746251, 950.1312511366845, 866.1883819843755, 857.5560050495451, 882.6861393995116, 901.9161745457444, 884.9296117603401, 817.7766004091158, 703.0238023685527, 559.7827349038004, 410.94777939702544, 276.7378676048881, 170.8982220732759, 98.06851465304764, 52.46895138611054, 27.232174044082107, 15.38065750972837, 10.48136705580729, 8.833469323854635, 9.565469599399965, 10.761534678782338, 11.304588400151541, 11.787406887122517, 12.223337199792322, 12.069622341514272, 12.05245413510663, 13.025721937300219, 14.608446526529463, 16.000967725077523, 17.112157513555676, 18.185276681512864, 18.20609027382475, 16.357271003303502, 13.74613360579259, 11.246818041301497, 7.986792511242081, 4.737132726564358, 3.508547297145742, 4.105313819087145, 5.513529051032984, 8.468918358842219, 12.648812232496395, 15.887415487144954, 17.341303992172016, 17.559606785087862, 16.150112579269962, 13.041155077852647, 9.379841491009733, 5.994298945046822, 2.7931238851899356, 0.13073255388214317, -1.4311503172992524, -1.5827005432519747, -0.42760359734912434, 1.9725042273293898, 5.378153087186428, 8.850457358540403, 11.278500365601916, 12.059358772267046, 11.359177474561339, 9.381978111435545, 6.969729761011334, 5.16753231208491, 5.006461989501284, 5.965496405468739, 7.343453382341551, 8.757681126475873, 9.477718298846158, 8.434013413815084, 6.516647630385243, 4.818880306493755, 3.2246842736904826, 2.303603100199687, 3.0307029143109356, 4.404190012809278, 5.5244378547480455, 6.948716706227566, 8.345095490278123, 8.809057106569096, 9.351437633013848, 10.5786814572194, 11.692711185323983, 12.629891429945307, 13.896622159892814, 14.77329312363394, 14.921500682732391, 15.069011222125994, 15.503705605822798, 16.32414437394887, 17.83351418935566, 20.148417304352957, 22.80008506482984, 26.038721730620285};
//		double[] zt = new double[4];
//		test.AutoFindCrest(4, 180, xt, yt, zt, 0.2);
//		//五点中值滤波一次
//		test.DigitalFilter(originDatasAmp, result, len, eFilterType.FILTERTYPE_MEDIAN, 5);
//
//		//中心五点滤波 三次
//		test.DigitalFilter(result, result, len, eFilterType.FILTERTYPE_CFMEAN5, 3);
//		test.DigitalFilter(result, result, len, eFilterType.FILTERTYPE_CFMEAN5, 3);
//		test.DigitalFilter(result, result, len, eFilterType.FILTERTYPE_CFMEAN5, 3);
//
//		//归一化处理
//		test.NormalizedAnalysisBySndDerivative(len, 3, pdx, result, result, 4);
//
//		//判断是否满足条件
//		if (test.AbleToCalculate(pdx, result, len, true, true)) {
//			//二阶导/插值法计算Ct值
//			double[] dCt = new double[1];
//			boolean bStdCurve = false;
//			double[] dLinePara = new double[2];
//			System.out.println(Arrays.toString(result));
//			LogUtils.d(Arrays.toString(result));
//			test.GenStdCurveBySndDerivative(1, len, pdx, result, dCt, dLinePara, bStdCurve, 4);
//			test.GenStdCurveByStd(1, len, 2, 10, 10, pdx, result, dCt, dLinePara, bStdCurve, false);
//			System.out.println("CT:" + Arrays.toString(dCt));
//			LogUtils.d("CT:" + Arrays.toString(dCt));
//			MyDouble yCur = new MyDouble(0);
//			test.Spline(pdx, result, len, dCt[0], yCur);
//			System.out.println("Thre:" + yCur.value);
//			LogUtils.d("Thre:" + yCur.value);
//		}
//	}


}
