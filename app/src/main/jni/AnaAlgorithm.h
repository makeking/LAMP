/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_anaalgorithm_AnaAlgorithm */

#ifndef _Included_com_anaalgorithm_AnaAlgorithm
#define _Included_com_anaalgorithm_AnaAlgorithm
#ifdef __cplusplus
extern "C" {
#endif
#define  LOG    "JavaCallCDemoLog" // 这个是自定义的LOG的标识
#define  LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG,__VA_ARGS__) // 定义LOGD类型
#define  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG,__VA_ARGS__) // 定义LOGI类型
#define  LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG,__VA_ARGS__) // 定义LOGW类型
#define LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG,__VA_ARGS__) // 定义LOGE类型
#define LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG,__VA_ARGS__) // 定义LOGF类型
/*
 * Class:     com_anaalgorithm_AnaAlgorithm
 * Method:    DigitalFilter
 * Signature: ([D[DILcom/anaalgorithm/eFilterType;I)V
 */
JNIEXPORT void JNICALL Java_com_anaalgorithm_AnaAlgorithm_DigitalFilter
        (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jint, jobject, jint);

/*
 * Class:     com_anaalgorithm_AnaAlgorithm
 * Method:    NormalizedAnalysisBySndDerivative
 * Signature: (II[D[D[DI)V
 */
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_NormalizedAnalysisBySndDerivative__II_3D_3D_3DI
        (JNIEnv *, jobject, jint, jint, jdoubleArray, jdoubleArray, jdoubleArray, jint);

/*
 * Class:     com_anaalgorithm_AnaAlgorithm
 * Method:    NormalizedAnalysisBySndDerivative
 * Signature: (I[D[D[DLcom/anaalgorithm/FunAmpNormalizedAnaParamInfo;)V
 */
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_NormalizedAnalysisBySndDerivative__I_3D_3D_3DLcom_anaalgorithm_FunAmpNormalizedAnaParamInfo_2(
        JNIEnv *, jobject, jint, jdoubleArray, jdoubleArray, jdoubleArray, jobject);

///*
// * Class:     com_anaalgorithm_AnaAlgorithm
// * Method:    AbleToCalculate
// * Signature: ([D[DILcom/anaalgorithm/FunAbleToCalcuParamInfo;)Z
// */
//JNIEXPORT jboolean JNICALL
//Java_com_anaalgorithm_AnaAlgorithm_AbleToCalculate___3D_3DILcom_anaalgorithm_FunAbleToCalcuParamInfo_2
//        (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jint, jobject);

///*
// * Class:     com_anaalgorithm_AnaAlgorithm
// * Method:    AbleToCalculate
// * Signature: ([D[DILcom/anaalgorithm/FunAbleToCalcuParamInfo;IIF)Z
// */
//JNIEXPORT jboolean JNICALL
//Java_com_anaalgorithm_AnaAlgorithm_AbleToCalculate___3D_3DILcom_anaalgorithm_FunAbleToCalcuParamInfo_2IIF(
//        JNIEnv *, jobject, jdoubleArray, jdoubleArray, jint, jobject, jint, jint, jfloat);


extern "C"
JNIEXPORT jboolean JNICALL
Java_com_anaalgorithm_AnaAlgorithm_AbleToCalculate(JNIEnv *env, jobject thiz, jdoubleArray dx,
                                                   jdoubleArray dy, jint n_num, jobject param_info,
                                                   jint new_start, jint new_forward_num,
                                                   jfloat new_std_num, jint min_x);


/*
 * Class:     com_anaalgorithm_AnaAlgorithm
 * Method:    SortDouble
 * Signature: (I[D[D)V
 */
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_SortDouble(JNIEnv *, jobject, jint, jdoubleArray, jdoubleArray);

/*
 * Class:     com_anaalgorithm_AnaAlgorithm
 * Method:    FirstNegDerivative
 * Signature: (II[D[D[D[D)V
 */
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_FirstNegDerivative(JNIEnv *, jobject, jint, jint, jdoubleArray,
                                                      jdoubleArray, jdoubleArray, jdoubleArray);

/*
 * Class:     com_anaalgorithm_AnaAlgorithm
 * Method:    DataDigitalFilter
 * Signature: (II[D[D[D)V
 */
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_DataDigitalFilter(JNIEnv *, jobject, jint, jint, jdoubleArray,
                                                     jdoubleArray, jdoubleArray);

/*
 * Class:     com_anaalgorithm_AnaAlgorithm
 * Method:    Spline
 * Signature: ([D[DIDLjava/lang/Double;)V
 */
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_Spline(JNIEnv *, jobject, jdoubleArray, jdoubleArray, jint,
                                          jdouble, jobject);

/*
 * Class:     com_anaalgorithm_AnaAlgorithm
 * Method:    Spline
 * Signature:
 */
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_CalDerivative(JNIEnv *, jobject, jdoubleArray, jdoubleArray,
                                                 jint, jint, jdoubleArray);

/*
 * Class:     com_anaalgorithm_AnaAlgorithm
 * Method:    GenStdCurveBySndDerivative
 * Signature: (II[D[D[D[DZI)V
 */
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_GenStdCurveBySndDerivative(JNIEnv *, jobject, jint, jint,
                                                              jdoubleArray, jdoubleArray,
                                                              jdoubleArray, jdoubleArray, jboolean,
                                                              jint);

/*
 * Class:     com_anaalgorithm_AnaAlgorithm
 * Method:    GenStdCurveBySelFluThres
 * Signature: (II[D[DD[D[DZ)V
 */
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_GenStdCurveBySelFluThres(JNIEnv *, jobject, jint, jint,
                                                            jdoubleArray, jdoubleArray, jdouble,
                                                            jdoubleArray, jdoubleArray, jboolean);

/*
 * Class:     com_anaalgorithm_AnaAlgorithm
 * Method:    GenStdCurveByStd
 * Signature: (IIIII[D[D[D[DZZ)V
 */
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_GenStdCurveByStd(JNIEnv *, jobject, jint, jint, jint, jint, jint,
                                                    jdoubleArray, jdoubleArray, jdoubleArray,
                                                    jdoubleArray, jboolean, jboolean);

/*
 * Class:     com_anaalgorithm_AnaAlgorithm
 * Method:    AutoFindCrest
 * Signature: (II[D[D[DD)V
 */
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_AutoFindCrest(JNIEnv *, jobject, jint, jint, jdoubleArray,
                                                 jdoubleArray, jdoubleArray, jdouble);
extern "C"
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_NormalizedAnalysisBySndDerivativeOpenBaseLineParam(JNIEnv *env,
                                                                                      jobject thiz,
                                                                                      jint n_num,
                                                                                      jdoubleArray pdx,
                                                                                      jdoubleArray pdy_input,
                                                                                      jdoubleArray pdy_output,
                                                                                      jobject paraminfo,
                                                                                      jobject base_line_param,
                                                                                      jint cur_index,
                                                                                      jdoubleArray p_ydisplay_input,
                                                                                      jdoubleArray p_ydisplay_output);

JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_KdsptForwardMBackN_1New(JNIEnv *env, jobject thiz, jint n,
                                                           jdoubleArray p_y, jdoubleArray p_return,
                                                           jint forward_m, jint backward_n);

JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_KdsptForwardMBackN(JNIEnv *env, jobject thiz, jint n,
                                                      jdoubleArray p_y, jdoubleArray p_return,
                                                      jint forward_m, jint backward_n);

extern "C"
JNIEXPORT void JNICALL
Java_com_anaalgorithm_AnaAlgorithm_DeltaRnAnalysisBySndDerivativeOpenBaseLineParam(JNIEnv *env,
                                                                                   jobject thiz,
                                                                                   jint n_num,
                                                                                   jdoubleArray pdx,
                                                                                   jdoubleArray pdy_input,
                                                                                   jdoubleArray pdy_output,
                                                                                   jobject paraminfo,
                                                                                   jobject base_line_param,
                                                                                   jdoubleArray p_ydisplay_input,
                                                                                   jdoubleArray p_ydisplay_output);

#ifdef __cplusplus
}
#endif
#endif
